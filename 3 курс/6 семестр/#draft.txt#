 При работе с задачником необходимо использовать следующие типы данных:
  bool — логические данные, ввод — функция GetBool(),
        int — данные целого типа, ввод — функция GetInt(),
        double — данные вещественного типа, ввод — функция GetDouble(),
        char — символьные данные, ввод — функция GetChar(),
        string — строковые данные, ввод — функция GetString(),
        Node — объекты-"узлы" (в заданиях групп Dynamic и Tree), ввод — функция GetNode().
        Начиная с версии 4.22, для любых функций ввода предусмотрены их модификации, обеспечивающие ввод кортежей размера 2, 3 и 4 (например, GetInt2(), GetInt3(), GetInt4()).
        Для быстрого ввода массивов, последовательностей IEnumerable<T>, списков List<T>, а также матриц (двумерных массивов), массивов массивов и списков списков с элементами целого, вещественного, символьного и строкового типа можно использовать следующие функции:
        GetArrInt, GetArrDouble, GetArrChar, GetArrString;
        GetSeqInt, GetSeqDouble, GetSeqChar, GetSeqString;
        GetListInt, GetListDouble, GetListChar, GetListString;
        GetMatrInt, GetMatrDouble, GetMatrChar, GetMatrString;
        GetArrArrInt, GetArrArrDouble, GetArrArrChar, GetArrArrString;
        GetListListInt, GetListListDouble, GetListListChar, GetListListString.
        Для вывода данных следует использовать функцию Put(a, b, c, ...) с произвольным числом параметров. Каждый параметр может быть элементом указанных выше скалярных типов, структурой данных или кортежем.
        Для вывода последовательности a можно также использовать метод расширения a.Put() (выводит размер последовательности и все ее элементы) и a.Put(count) (выводит count начальных элементов последовательности). Имеется также метод расширения Show(), который обеспечивает вывод последовательности в разделе отладки и может использоваться в цепочках запросов LINQ.
        Указанные выше скалярные типы надо использовать при работе с двоичными файлами. Строковые файлы содержат строки, дополненные справа пробелами до 80 символов, поэтому из строки s, прочитанной из строкового файла, необходимо удалить правые пробелы методом s.TrimEnd(), а перед записью строки в строковый файл необходимо дополнить ее до 80 символов методом s.PadRight(80).
        При работе с любыми файлами, содержащими текстовую информацию на русском языке, необходимо использовать кодировку System.Text.Encoding.Default для платформы .NET Framework и кодировку System.Text.Encoding.GetEncoding(1251) для платформы .NET Core.